##Authors: Anjali Karki, Ali Bichanga, Flora Mukako, Indira Ruslanova

from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, flash, session, send_from_directory, jsonify)
from werkzeug.utils import secure_filename
app = Flask(__name__)
import os
from werkzeug.utils import secure_filename
import secrets
import homepage as homepage
import login as login
import cs304dbi as dbi


#for file upload
app.config['UPLOADS'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 20*1024*1024 # 20 MB
# Directory for profile picture uploads
app.config['UPLOADS1'] = os.path.expanduser('~/cs304/roomie-match/uploads/profile_pics')  


app.secret_key = 'your secret here'
app.secret_key = secrets.token_hex()

# This gets us better error messages for certain common request errors
app.config['TRAP_BAD_REQUEST_ERRORS'] = True


@app.route('/')
def index():
    '''Route for rendering the home page'''
    return render_template('home.html',
                           page_title='Home Page')

###################################################################################################################
##Posts-related functions
@app.route('/makePost/', methods=["GET", "POST"])
def makePosts():
    '''
    Takes no parameter, 
    Allows users to create and submit a post and renders the feedpage
    '''
    if 'user_id' in session:
        uid = session['user_id']
        if request.method == 'GET':
            return render_template('makePosts.html',
                            page_title='Make a Post')
        else: 
            conn = dbi.connect()
            curs = dbi.dict_cursor(conn)

            #retrieves form data 
            p_type = request.form.get('post_type')
            h_type = request.form.get('housing_type')
            rent = request.form.get('budget')
            roommatesNum = request.form.get('max_roommates')
            sbed = request.form.get('shared_bedroom')
            sbath = request.form.get('mshared_bathroom')
            pets = request.form.get('ok_with_pets')
            description = request.form.get("descr")
            pref_location = request.form.get("location")

            #insert into the database
            #checks wether the inputs are integers
            if homepage.isInt(rent) and homepage.isInt(roommatesNum):
                curs.execute(
                    '''insert into post(user_id, shared_bathroom, shared_bedroom, 
                    ok_with_pets, max_roommates, budget, housing_type, post_type, post_desc, location) 
                    values (%s,%s,%s,%s,%s,%s,%s,%s, %s, %s)''',
                    [uid, sbath, sbed, pets, roommatesNum, rent, h_type, p_type, description, pref_location])
                conn.commit()
                #use last_inserted_id to get the post id
                curs.execute('''
                            select last_insert_id() as pid''')
                pidDict = curs.fetchone()
                pid = pidDict['pid']

                if not os.path.exists('uploads'):
                    os.makedirs('uploads')

                if request.files['pic']:
                    f = request.files['pic']
                    user_filename = f.filename
                    ext = user_filename.split('.')[-1]
                    filename = secure_filename('{}_{}.{}'.format(pid, uid, ext))
                    pathname = os.path.join(app.config['UPLOADS'],filename)
                    f.save(pathname)
                
                curs.execute(
                    '''insert into file(user_id, post_id, room_pic_filename) values (%s,%s, %s)
                        ''', [uid, pid, filename])
                conn.commit()
                flash('Post successful')
                return redirect(url_for('viewPosts'))
            else:
                flash('Budget and max_number of roomates should be integers')
    else:
        flash('You must be logged in to make a post!') 
        return redirect(url_for('index'))

@app.route('/roompic/<file_id>')
def roompic(file_id):
    '''Takes an integer i.e. the file id number,
    Retrieves the room picture's filename with given file id,
    Returns a web page containing the room picture with given id'''
    conn = dbi.connect()
    curs = dbi.dict_cursor(conn)
    numrows = curs.execute(
        '''select room_pic_filename from file where file_id = %s''',
        [file_id])
    if numrows == 0:
        flash('No picture for {}'.format(file_id))
        return redirect(url_for('index'))
    row = curs.fetchone()
    return send_from_directory(app.config['UPLOADS'],row['room_pic_filename']) 

@app.route('/feed/', methods=["GET", "POST"])
def viewPosts():
    '''Takes no parameter,
    Allows user to view the feed with posts made by all users,
    Returns the feed webpage'''
    #Only allow logged in users to view the feed
    if 'user_id' in session:
        conn = dbi.connect()
        posts = homepage.getPostDetails(conn)
        print(posts)
    
        if posts:
            for info in posts:
                userInfo = homepage.getUser(conn, info['user_id'])
                if userInfo['name'] != None:
                    info['name'] = userInfo['name']
                else:
                    info['name'] = "Unknown"
            return render_template('feed.html',
                            page_title='Posts',
                            allPosts = posts)
    #If they are not logged in, redirect to log in page with a message
    else:
        flash('You must be logged in to view the posts!')
        return redirect(url_for('index'))
#######################################################################################################################

# Code related to profile feature
@app.route('/profile/', methods=["GET", "POST"])
def viewProfile():
    '''
    Takes no parameter,
    Allows user to view their profile with all their info associated,
    Returns the profile web page with all their details
    '''
    user_id = session.get('user_id')
    if not user_id:
        flash("You must be logged in to view the profile.")
        return redirect(url_for('index'))

    conn = dbi.connect()
    curs = dbi.dict_cursor(conn)
    
    # Fetch user information
    curs.execute('''SELECT user_id, name, gender, age, profession,
                  profile_desc, location, pets, hobbies, seeking 
                 FROM user WHERE user_id = %s''', [user_id])
    user = curs.fetchone()
    
    # Fetch profile picture
    curs.execute('SELECT file_id, profile_pic_filename FROM file WHERE user_id = %s', [user_id])
    profile_pic_data = curs.fetchone()

    if user:
        if profile_pic_data:
            profile_pic_filename = profile_pic_data['profile_pic_filename']
            profile_pic = url_for('pic', file_id=profile_pic_data['file_id'])
        else:
            profile_pic = None
        
        # Render the profile page after gathering the data
        return render_template('viewProfile.html', user=user, profile_pic=profile_pic)
    else:
        flash("User not found.")
        return redirect(url_for('index'))

@app.route('/prof_pic/<file_id>')
def pic(file_id):
    '''
    Takes in an integer i.e. the file id,
    Looks up the profile picture's filename associated with the given file_id
    Returns a web page with the profile picture associated with given file_id'''
    conn = dbi.connect()
    curs = dbi.dict_cursor(conn)
    numrows = curs.execute(
        '''select profile_pic_filename from file where file_id = %s''',
        [file_id])
    if numrows == 0:
        flash('No picture for {}'.format(file_id))
        return redirect(url_for('index'))
    row = curs.fetchone()
    return send_from_directory(app.config['UPLOADS'],row['profile_pic_filename'])

@app.route('/upload-profile-pic/', methods=["POST"])
def upload_profile_pic():
    '''
    Takes no parameter,
    Allows users to upload profile picture
    Returns a webpage with their profile details and new profile picture
    '''
    user_id = session.get('user_id')
    if not user_id:
        flash("Please log in to upload a profile picture.")
        return redirect(url_for('viewProfile'))

    conn = dbi.connect()
    curs = dbi.cursor(conn)

    # Check if the user already has a profile picture
    curs.execute('SELECT file_id, profile_pic_filename FROM file WHERE user_id = %s', [user_id])
    existing_file = curs.fetchone()

    if 'file' not in request.files:
        flash("No file part.")
        return redirect(url_for('viewProfile'))

    f = request.files['file']
    if f.filename == '':
        flash("No selected file.")
        return redirect(url_for('viewProfile'))

    filename = secure_filename(f.filename)
    file_path = os.path.join(app.config['UPLOADS'], filename)
    f.save(file_path)

    try:
        if existing_file:
            # Update existing profile picture
            curs.execute('UPDATE file SET profile_pic_filename = %s WHERE user_id = %s', [filename, user_id])
        else:
            # Insert new profile picture record
            curs.execute('INSERT INTO file (user_id, profile_pic_filename) VALUES (%s, %s)', [user_id, filename])

        conn.commit()  # Commit changes to the database
        flash("Profile picture uploaded successfully!")
    except Exception as e:
        flash(f"An error occurred while saving the file: {e}")
        return redirect(url_for('viewProfile'))

    return redirect(url_for('viewProfile'))

@app.route('/delete-profile-pic/', methods=["POST"])
def delete_profile_pic():
    '''
    Allows users to delete a profile picture
    '''
    user_id = session.get('user_id')
    if not user_id:
        flash("Please log in to delete your profile picture.")
        return redirect(url_for('viewProfile'))

    conn = dbi.connect()
    curs = dbi.cursor(conn)

    try:
        # Fetch and delete the file from the file system
        curs.execute('''SELECT profile_pic_filename 
                     FROM file WHERE user_id = %s''', [user_id])
        profile_pic_file = curs.fetchone()

        if profile_pic_file:
            filename = profile_pic_file[0]  # Accessing the filename by index
            file_path = os.path.join(app.config['UPLOADS'], filename)

            if os.path.exists(file_path):
                os.remove(file_path)

            # Remove the file record from the database
            curs.execute('DELETE FROM file WHERE user_id = %s', [user_id])
            conn.commit()  # Commit after deleting the file record
            flash("Profile picture deleted successfully.")
        else:
            flash("No profile picture to delete.")
    except Exception as e:
        flash(f"An error occurred while deleting the profile picture: {e}")
        conn.rollback()  # Rollback in case of an error

    return redirect(url_for('viewProfile'))

@app.route('/delete_account/', methods=['POST'])
def delete_account():
    '''Allows users to delete their account from the app'''
    user_id = session.get('user_id')
    if not user_id:
        flash("You must log in to delete your account.")
        return redirect(url_for('login'))

    conn = dbi.connect()
    curs = dbi.cursor(conn)

    try:
        # Call delete_profile_pic to remove the profile picture
        delete_profile_pic()

        # Delete the user's account record from the database
        curs.execute('DELETE FROM user WHERE user_id = %s', [user_id])
        curs.execute('DELETE FROM login WHERE user_id = %s', [user_id])
        conn.commit()

        # Clear the user's session
        session.clear()

        flash("Account and profile picture deleted successfully.")
        return redirect(url_for('join'))
    except Exception as e:
        flash(f"Error deleting account: {e}")
        return redirect(url_for('viewProfile'))

@app.route('/edit-profile/', methods=["GET", "POST"])
def editProfile():
    '''Allows user sto edit their profile details'''
    user_id = session.get('user_id')
    if not user_id:
        flash("You must log in to edit the profile.")
        return redirect(url_for('login'))

    if request.method == "POST":
        new_name = request.form.get('name')
        new_gender = request.form.get('gender')
        new_age = request.form.get('age')
        new_profession = request.form.get('profession')
        new_location = request.form.get('location')
        new_desc = request.form.get('profile_desc')
        new_pets = request.form.get('pets')
        new_hobbies = request.form.get('hobbies')
        new_seeking = request.form.get('seeking')

        conn = dbi.connect()
        curs = dbi.cursor(conn)

        try:
            curs.execute('''UPDATE user 
                         SET name = %s, gender = %s, age = %s, profession = %s, 
                         location = %s, profile_desc = %s, pets = %s, hobbies = %s, 
                         seeking = %s WHERE user_id = %s''',
                         [new_name, new_gender, new_age, new_profession, new_location, 
                          new_desc, new_pets, new_hobbies, new_seeking, user_id])
            conn.commit()
            flash("Profile updated successfully!")
            return redirect(url_for('viewProfile'))
        except Exception as e:
            flash(f"Error updating profile: {e}")
    
    # Show the form to edit
    conn = dbi.connect()
    curs = dbi.dict_cursor(conn)
    curs.execute('''SELECT name, gender, age, profession, location, 
                 profile_desc, pets, hobbies, seeking 
                 FROM user WHERE user_id = %s''', [user_id])
    user = curs.fetchone()

    return render_template('editProfile.html', user=user)

@app.route('/edit-profile-desc/', methods=["POST"])
def edit_profile_desc():
    user_id = session.get('user_id')
    new_desc = request.form.get('profile_desc')
    conn = dbi.connect()
    curs = dbi.cursor(conn)
    try:
        curs.execute('''UPDATE user 
                     SET profile_desc = %s WHERE user_id = %s''',
                     [new_desc, user_id])
        conn.commit()
        flash("Profile description updated successfully!")
    except Exception as e:
        flash(f"Error updating profile description: {e}")
    return redirect(url_for('viewProfile'))

@app.route('/edit-location/', methods=["POST"])
def edit_location():
    '''
    Allows users to edit their location
    '''
    user_id = session.get('user_id')
    new_location = request.form.get('location')
    conn = dbi.connect()
    curs = dbi.cursor(conn)
    try:
        curs.execute('''UPDATE user 
                     SET location = %s 
                     WHERE user_id = %s''',
                     [new_location, user_id])
        conn.commit()
        flash("Location updated successfully!")
    except Exception as e:
        flash(f"Error updating location: {e}")
    return redirect(url_for('viewProfile'))

@app.route('/edit-hobbies/', methods=["POST"])
def edit_hobbies():
    '''
    Allows users to edit their hobbies
    '''
    user_id = session.get('user_id')
    new_hobbies = request.form.get('hobbies')
    conn = dbi.connect()
    curs = dbi.cursor(conn)
    try:
        curs.execute('UPDATE user SET hobbies = %s WHERE user_id = %s',
                     [new_hobbies, user_id])
        conn.commit()
        flash("Hobbies updated successfully!")
    except Exception as e:
        flash(f"Error updating hobbies: {e}")
    return redirect(url_for('viewProfile'))

@app.route('/edit-name/', methods=["POST"])
def edit_name():
    '''
    Allows users to edit their name
    '''
    user_id = session.get('user_id')
    new_name = request.form.get('name')
    conn = dbi.connect()
    curs = dbi.cursor(conn)
    try:
        curs.execute('''UPDATE user 
                     SET name = %s 
                     WHERE user_id = %s''',
                     [new_name, user_id])
        conn.commit()
        flash("Name updated successfully!")
    except Exception as e:
        flash(f"Error updating name: {e}")
    return redirect(url_for('viewProfile'))

@app.route('/edit-gender/', methods=["POST"])
def edit_gender():
    '''
    Allows users to edit their gender
    '''
    user_id = session.get('user_id')
    new_gender = request.form.get('gender')
    conn = dbi.connect()
    curs = dbi.cursor(conn)
    try:
        curs.execute('''UPDATE user 
                     SET gender = %s WHERE user_id = %s''',
                     [new_gender, user_id])
        conn.commit()
        flash("Gender updated successfully!")
    except Exception as e:
        flash(f"Error updating gender: {e}")
    return redirect(url_for('viewProfile'))

@app.route('/edit-age/', methods=["POST"])
def edit_age():
    '''
    Allows users to edit their age
    '''
    user_id = session.get('user_id')
    new_age = request.form.get('age')
    conn = dbi.connect()
    curs = dbi.cursor(conn)
    try:
        curs.execute('UPDATE user SET age = %s WHERE user_id = %s',
                     [new_age, user_id])
        conn.commit()
        flash("Age updated successfully!")
    except Exception as e:
        flash(f"Error updating age: {e}")
    return redirect(url_for('viewProfile'))

@app.route('/edit-profession/', methods=["POST"])
def edit_profession():
    '''
    Allows users to edit their profession
    '''
    user_id = session.get('user_id')
    new_profession = request.form.get('profession')
    conn = dbi.connect()
    curs = dbi.cursor(conn)
    try:
        curs.execute('UPDATE user SET profession = %s WHERE user_id = %s',
                     [new_age, user_id])
        conn.commit()
        flash("Profession updated successfully!")
    except Exception as e:
        flash(f"Error updating profession: {e}")
    return redirect(url_for('viewProfile'))

@app.route('/edit-pets/', methods=["POST"])
def edit_pets():
    '''
    Allows users to edit their pet preference
    '''
    user_id = session.get('user_id')
    new_pets = request.form.get('pets')
    conn = dbi.connect()
    curs = dbi.cursor(conn)
    try:
        curs.execute('UPDATE user SET pets = %s WHERE user_id = %s',
                     [new_pets, user_id])
        conn.commit()
        flash("Pets updated successfully!")
    except Exception as e:
        flash(f"Error updating pets: {e}")
    return redirect(url_for('viewProfile'))

@app.route('/edit-seeking/', methods=["POST"])
def edit_seeking():
    '''
    Allows users to edit what they are seeking
    '''
    user_id = session.get('user_id')
    new_seeking = request.form.get('seeking')
    conn = dbi.connect()
    curs = dbi.cursor(conn)
    try:
        curs.execute('UPDATE user SET seeking = %s WHERE user_id = %s',
                     [new_seeking, user_id])
        conn.commit()
        flash("Seeking updated successfully!")
    except Exception as e:
        flash(f"Error updating seeking: {e}")
    return redirect(url_for('viewProfile'))
###################################################################################################################
#Yet to be implemented
@app.route('/chat/', methods=["GET", "POST"])
def viewChat():
    '''Shows the user's chat history and people - yet to be implemented'''
    if 'user_id' in session:
        return render_template('chat.html',
                           page_title='Chat History')
    else:
        flash('You must be logged in to use the Chat feature!')
        return redirect(url_for('index'))
###################################################################################################################
if __name__ == '__main__':
    import sys, os
    if len(sys.argv) > 1:
        # arg, if any, is the desired port number
        port = int(sys.argv[1])
        assert(port>1024)
    else:
        port = os.getuid()
    # set this local variable to 'wmdb' or your personal or team db
    db_to_use = 'roomie_match_db' 
    print(f'will connect to {db_to_use}')
    dbi.conf(db_to_use)
    app.debug = True
    app.run('0.0.0.0',port)from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, flash, session, send_from_directory, jsonify)
from werkzeug.utils import secure_filename
from __main__ import app

import bcrypt
import cs304dbi as dbi

@app.route('/sign-up/', methods=["GET", "POST"])
def join():
    if request.method == "GET":
        return render_template ("sign-up.html", page_title="Sign Up")
    else: 
        username = request.form.get('user-name')
        passwd1 = request.form.get('password1')
        passwd2 = request.form.get('password2')
        if passwd1 != passwd2:
            flash('passwords do not match')
            return redirect( url_for('join'))
        if '@wellesley.edu' not in username:
            flash('Please use your Wellesley email!')
            return redirect( url_for('join'))

        
        hashed = bcrypt.hashpw(passwd1.encode('utf-8'),
                            bcrypt.gensalt())
        stored = hashed.decode('utf-8')
        print(passwd1, type(passwd1), hashed, stored)

        #connect to database
        conn = dbi.connect()
        curs = dbi.cursor(conn)
        try:
            curs.execute('''INSERT INTO login(user_name,hashed_password)
                            VALUES(%s,%s)
                         RETURNING user_id''',
                        [username, stored])
            user_id = curs.fetchone()[0]

            # Insert the user_id into the user table
            curs.execute('''INSERT INTO user(user_id)
                VALUES(%s)''',
             [user_id])
            
            conn.commit()
        except Exception as err:
            flash('That email is tied to an existing account: {}'.format(repr(err)))
            return redirect(url_for('index'))
        curs.execute('select last_insert_id()')
        row = curs.fetchone()
        uid = row[0]
        flash('FYI, you were issued UID {}'.format(uid))
        session['username'] = username
        session['uid'] = uid
        session['logged_in'] = True
        session['visits'] = 1
        return redirect( url_for('login' ) ) #, username=username) )

@app.route('/login/', methods=["GET", "POST"])
def login():
    if request.method == "GET":
        return render_template ("login.html", page_title="Log In")
    
    else: 
        username = request.form.get('username')
        passwd = request.form.get('password')
        conn = dbi.connect()
        curs = dbi.dict_cursor(conn)
        curs.execute('''SELECT user_id,user_name,hashed_password
                        FROM login
                        WHERE user_name = %s''',
                    [username])
        row = curs.fetchone()
        if row is None:
            # Same response as wrong password,
            # so no information about what went wrong
            flash('login incorrect. Try again or join')
            return redirect( url_for('login'))
        
        stored = row['hashed_password']
        print('database has stored: {} {}'.format(stored,type(stored)))
        print('form supplied passwd: {} {}'.format(passwd,type(passwd)))
        hashed2 = bcrypt.hashpw(passwd.encode('utf-8'),
                                stored.encode('utf-8'))
        hashed2_str = hashed2.decode('utf-8')
        print('rehash is: {} {}'.format(hashed2_str,type(hashed2_str)))
        if hashed2_str == stored:
            print('they match!')
            flash('successfully logged in as '+username)
            session['username'] = username
            session['user_id'] = row['user_id']
            session['logged_in'] = True
            session['visits'] = 1
            return redirect( url_for('viewProfile' ) ) #, username=username) )
        else:
            flash('password incorrect. Try again or join')
            return redirect( url_for('join'))
        
@app.route('/logout/')
def logout():
    if 'username' in session:
        username = session['username']
        session.pop('username')
        session.pop('user_id')
        session.pop('logged_in')
        flash('You are logged out')
        return redirect(url_for('index'))
    else:
        flash('you are not logged in. Please login or join')
        return redirect( url_for('index') )
    
# Roomie-match Homepage flask code 

# one or the other of these. Defaults to MySQL (PyMySQL)
# change comment characters to switch to SQLite

from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, flash, session, send_from_directory, jsonify)
from werkzeug.utils import secure_filename
app = Flask(__name__)

# one or the other of these. Defaults to MySQL (PyMySQL)
# change comment characters to switch to SQLite


# import cs304dbi_sqlite3 as dbi
from werkzeug.utils import secure_filename
import secrets
import homepage

import cs304dbi as dbi
# import cs304dbi_sqlite3 as dbi

import secrets

app.secret_key = 'your secret here'
# replace that with a random key
app.secret_key = secrets.token_hex()

# This gets us better error messages for certain common request errors
app.config['TRAP_BAD_REQUEST_ERRORS'] = True


#helper functions
def getPostDetails(conn):
    '''gets post details from the database'''
    conn = dbi.connect()
    curs = dbi.dict_cursor(conn)
    posts = curs.execute('''select post.user_id, shared_bathroom, shared_bedroom, ok_with_pets, max_roommates,
            budget, housing_type, post_type, location, post_desc, room_pic_filename, file_id from post join file on post.post_id= file.post_id''')
    return curs.fetchall()

def getProfilePic(conn, postId):
    '''gets picture associated with the post from the database for the feed'''
    conn = dbi.connect()
    curs = dbi.dict_cursor(conn)
    picture = curs.execute('''select room_pic_filename from file where post_id = %s''', [postId])
    return curs.fetchone()
    



def getUser(conn, id):
    '''gets user's details '''
    conn = dbi.connect()
    curs = dbi.dict_cursor(conn)
    userInfo = curs.execute('''select name, profile_desc from user inner join post
                            using(user_id) where user_id = %s''', [id])
    return curs.fetchone()

def isInt(var):
    try:
        var = int(var)
        return True
    except ValueError:
        return False

""" def insert_new_post(conn):
    '''Inserts new post data'''
    conn = dbi.connect()
    curs = dbi.dict_cursor(conn)
    curs.execute('''insert into post values(%s, %s, %s, %s)''', [], [], [], )
@app.route('/makePost/', methods=["GET", "POST"])
def makePosts():
    if request.method == 'GET':
        return render_template('makePosts.html',
                           page_title='Make a Post')
    else:
        conn = dbi.connect()
    curs = dbi.dict_cursor(conn)
    #use last_inserted_id to get the post id
    curs.execute('''
                 select last_insert_id''')
    pidDict = curs.fetchone()
    pid = pidDict['last_insert_id()']
    #retrieves form data 
    p_type = request.form.get('post_type')
    h_type = request.form.get('housing_type')
    rent = request.form.get('budget')
    roommatesNum = request.form.get('max_roommates')
    sbed = request.form.get('shared_bedroom')
    sbath = request.form.get('mshared_bathroom')
    pets = request.form.get('ok_with_pets')
    description = request.form.get("descr")
    uid = session.get('user_id')
    f = request.files['pic']
    user_filename = f.filename
    ext = user_filename.split('.')[-1]
    filename = secure_filename('{}_{}.{}'.format(pid, uid, ext))
    pathname = os.path.join(app.config['UPLOADS'],filename)
    f.save(pathname)
    #insert into the database
    curs.execute('''insert into post(user_id, shared_bathroom, shared_bedroom, 
        ok_with_pets, max_roommates, budget, housing_type, post_type) 
        values (%s,%s,%s,%s,%s,%s,%s,%s)''',
        [uid, sbath, sbed, pets, roommatesNum, rent, h_type, p_type])

    curs.execute(
        '''insert into file(user_id, post_id, room_pic) values (%s,%s, %s)
            ''',
                [uid, pid, filename])
    conn.commit()
    flash('Post successful')
    return redirect(url_for('viewPosts'))



@app.route('/insert-postData/', methods=['POST'])
def insert_new_post():
    

@app.route('/feed/', methods=["GET", "POST"])
def viewPosts():
    conn = dbi.connect()
    posts = homepage.getPostDetails(conn)
   
    if posts:
        for info in posts:
            userInfo = homepage.getUser(conn, info['user_id'])
    return render_template('feed.html',
                           page_title='Posts',
                            allPosts = posts,
                            userDetails = userInfo,
                            name = userInfo["name"],
                            prof_desc = userInfo['profile_desc'] ) """<!--Roomie Match Project by Anjali Karki, Indira Ruslanova, Flora Mukako, Ali Bichanga-->
<!--Base template for final project. Sets up nav bar at the top with options of Home, Profile, Posts, and Chat-->
<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <!-- for mobile-friendly pages -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{{ page_title }}</title>
    <link rel='stylesheet' href="{{url_for('static', filename = 'style.css')}}">
    {% block head_stuff %} {% endblock %}
</head>
<body>

{% with messages = get_flashed_messages() %}
{% if messages %}
<div id="messages">
  {% for msg in messages %}
  <p>{{msg}}</p>
  {% endfor %}
</div>
{% endif %}
{% endwith %}
            
{% block nav %}
<nav>
  <ul>
    <li><a href="{{url_for('index')}}">Home</a></li>
    <li><a href="{{url_for('viewProfile')}}">Profile</a></li>
    <li><a href="{{url_for('viewPosts')}}">Posts</a></li>
    <li><a href="{{url_for('makePosts')}}">Make a Post</a></li>
    <li><a href="{{url_for('viewChat')}}">Chat</a></li>
  </ul>
</nav>
{% endblock %}

{% block main_content %}
{% endblock %}

{% block content %}

{% endblock %}

  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
  {% block end_scripts %}
  {% endblock %}
  
</body>
</html>
{% extends "base.html" %}
{% block main_content %}
<h1>Chat feature coming soon! </h1>
{% endblock %}{% extends "base.html" %}
{% block main_content %}
    <h1>Welcome, {{ username }}</h1>

    <h1>Edit Profile</h1>

    <!-- Consolidated form for all profile fields -->
    <form action="{{ url_for('editProfile') }}" method="post">
        <div>
            <label for="name">Name:</label>
            <input type="text" name="name" id="name" value="{{ user.name }}" required>
        </div><br>

        <div>
            <label for="gender">Gender:</label>
            <input type="text" name="gender" id="gender" value="{{ user.gender }}" required>
        </div><br>

        <div>
            <label for="age">Age:</label>
            <input type="text" name="age" id="age" value="{{ user.age }}" required>
        </div><br>

        <div>
            <label for="profession">Profession:</label>
            <input type="text" name="profession" id="profession" value="{{ user.profession }}" required>
        </div><br>

        <div>
            <label for="location">Location:</label>
            <input type="text" name="location" id="location" value="{{ user.location }}" required>
        </div><br>

        <div>
            <label for="profile_desc">Profile Description:</label>
            <textarea name="profile_desc" id="profile_desc" rows="4" cols="50" required>{{ user.profile_desc }}</textarea>
        </div><br>

        <div>
            <label for="pets">Pets:</label>
            <input type="text" name="pets" id="pets" value="{{ user.pets }}" required>
        </div><br>

        <div>
            <label for="hobbies">Hobbies:</label>
            <input type="text" name="hobbies" id="hobbies" value="{{ user.hobbies }}" required>
        </div><br>

        <div>
            <label for="seeking">Seeking:</label>
            <input type="text" name="seeking" id="seeking" value="{{ user.seeking }}" required>
        </div><br>

        <!-- Save Changes button for all fields -->
        <button type="submit">Save Changes</button>
    </form>

    <form method="POST" action="{{ url_for('delete_account') }}">
        <button type="submit">Delete Account</button>
    </form>
    
{% endblock %}
{% extends "base.html" %}

{% block main_content %}
<h1>Roomie-match</h1>
{% for post in allPosts %}

<div class="post" >
    <!-- <p><img class="pics" src="{{url_for('pic',file_id=post.file_id)}}" alt="profPic">  -->
        {{post.name}} is looking for {{post.post_type}}! </p>
        <p class="desc">Post Description: {{post.post_desc or "No description"}}</p>
        <ul>
            <li>Location: {{post.location}}</li>
            <li>Monthly Rent: ${{post.budget}}</li>
            <li>Maximum Number of Roommates Needed: {{post.max_roommates}}</li>
            <li>Shared Bathroom: {{post.shared_bathroom}}</li>
            <li>Shared Bedroom: {{post.shared_bedroom}}</li>
            <li>Pets Friendly: {{post.ok_with_pets}}</li>
            <li>Picture of the room:</li> 
            <img class="pics" src="{{url_for('roompic',file_id=post.file_id)}}">
        </ul>
        <form method="get" action="{{url_for('viewChat')}}">
        <p><input type="submit" id="submit" value="Message {{post.name}}"> </p>
        </form>
    </p>
</div>
{% endfor %}
{% endblock %}<!--Roomie Match team: Anjali Karki, Flora Mukako, Indira Ruslanova, Ali Bichanga-->
<!--Home page with nav bar-->

{% extends "base.html" %}

{% block main_content %}
<h1>Home</h1>
<h2> Welcome to Roomie Match! Where you connect with roommates and find your place! </h2>
<div class="loginSignup">
    <div class="login">
        <p>New user? Sign up below!</p>
        <h2 id="signupButton" class="loginButtons"><a href="{{url_for('join')}}">Sign Up</a></h2>
    </div>
    <div class="login">
        <p id="loginButton">Already a user? Login below!</p>
        <h2 id="loginButton" class="loginButtons"><a href="{{url_for('login')}}">Log In</a></h2>
    </div>
</div>
{% endblock %}{% extends "base.html" %}

{# replaces default content block #}
{% block content %}
<div class="form">
    <form id="login-form"
        method="post"
        action="/login">

    <p><label>Email:
        <input required type="text" name="username" size="50" placeholder="Please enter @wellesley.edu email"></label></p>

    <p><label>Password:
        <input required type="password" name="password" size="50" placeholder=""></textarea>
    </label></p>


    <p><input type="submit" value="Login">

    </form>
</div>
<h2 id="signupButton" class="loginButtons"><a href="{{url_for('join')}}">Sign Up</a></h2>


{% endblock %}{% extends "base.html" %}

{% block main_content %}
<h1>Make a new post</h1>
<div class="newPostForm">

  <form method="POST" action="{{url_for('makePosts')}}" enctype="multipart/form-data">
    
    <p>
        <label for="post_type"> What are you looking for: 
            <select id="post_type" name ="post_type" required>
                <option value="">select</option>
                <option value="roommate">roommates(Looking for roommates to join your housing)</option>
                <option value="housing">housing</option> 
        </label></select> 
    </p>
    
    <p>
        <label for="housing_type"> Housing type: 
            <select id="housing_type" name ="housing_type" required>
                <option value="">select</option>
                <option value="long-term-post-grad">Longterm Post-grad</option>
                <option value="summer">Summer</option>
                <option value="winter">Winter</option>
                <option value="short-term">Short-term</option> 
        </label></select> 
    </p>
    
    <p>
        <label for="location"> What is your preferred location? 
            <input required type="location" name="location" id= "location"> 
        </label> 
    </p>
    
    <p>
        <label for="budget"> How much is the monthly rent or your monthly budget?
            <input required type="budget" name="budget" id= "budget"> 
        </label> 
    </p>
    
    <p>
        <label for="max_roomates"> What is the maximum number of Roommates you are willing to live with?
            <input required type="max_roomates" name="max_roommates" id= "max_roommates"> 
        </label> 
    </p>
    
    <label for="post_desc">Give a brief description of what you are looking for: <br>
        <textarea id= "descr" name="descr" rows="3" cols="30" required></textarea>
    </label>
    
    <br>
    
    <p>
        <label for="shared_bathroom"> Does your housing have shared Bathroom or are you willing to share a bathroom? 
            <select id="shared_bathroom" name ="shared_bathroom" required>
                <option value="">select</option>
                <option value="yes">Yes</option>
                <option value="no">No</option>
            </select>
        </label>
    </p>
    
    <p>
        <label for="shared_bedroom"> Does your housing have shared bedroom or are you willing to share a bedroom?
            <select id="shared_bedroom" name ="shared_bathroom" required>
                <option value="">select</option>
                <option value="yes">Yes</option>
                <option value="no">No</option>
            </select>
        </label>
    </p>
    
    <p>
        <label for="ok_with_pets"> Is this a pets-friendly space? or are you okay to live in a pet friendly space? 
            <select id="ok_with_pets" name ="ok_with_pets" required>
                <option value="">select</option>
                <option value="yes">Yes</option>
                <option value="no">No</option> 
            </select>
        </label> 
    </p>

    <p>If you already have housing and looking for roommates,
    upload pictures of your appartment/house or <br>
    If you are seeking a room, upload what your ideal room looks like:</p>
    <p>
        <label>Pic: 
            <input type="file" name="pic" required>
        </label>
    </p>
  

    <p>
        <input type="submit" id="submit" value="Submit"> 
    </p>

</form>
</div>
{% endblock %}

<!-- {% if post_type == 'roommate' %} -->
   <!-- {% endif %} -->

   <!-- <form method="post" action="{{url_for('makePosts')}}" enctype="multipart/form-data">
    <p><label>Pic: <input type="file" name="pic"></label></p>
    <p><input type="submit" value="upload"></p>
</form> -->{% extends "base.html" %}

{# replaces default content block #}
{% block content %}
<div class="form">
    <form id="messages-form"
        method="post"
        action="/message/{{recipient_uid}}">
    <h2> Messages </h2>
    <p><label>Message:
        <input required type="text" name="message" size="50"></label></p>

    <p><input name="send" type="submit" value="sendMessage"></p>

    </form>
</div>
<h2 id="loginButton" class="loginButtons"><a href="url_for('viewPosts')">Back</a></h2>

{% endblock %}{% extends "base.html" %}
{# replaces default content block #}
{% block content %}
<div class="form">
    <form id="sign-up-form"
        method="post"
        action="/sign-up"> 

    <p><label>Email:
        <input required type="text" name="user-name" size="50" placeholder="Please enter @wellesley.edu email"></label></p>

    <p><label>Password:
        <input required type="password" name="password1" size="50" placeholder="Please use letters, digits & special characters"></textarea>
    </label></p>

    <p><label>Re-type Password:
        <input required type="password" name="password2" size="50" placeholder="Retype your password"></textarea>
    </label></p>

    <p><input type="submit" value="Sign Up"></p>

    </form>
</div>
<h2 id="loginButton" class="loginButtons"><a href="{{url_for('login')}}">Log In</a></h2>

{% endblock %}{% extends "base.html" %}

{ % block main_content % }
<p>Post made successfully! Thank you</p>
<a href="{{url_for('makePosts')}}">Make another post</a></li>

{% endblock %}{% extends "base.html" %}{% extends "base.html" %}

{% block main_content %}

<h1>{{ page_title }}</h1>

<!-- Display Profile Picture -->
<div>
    {% if profile_pic %}
        <img src="{{ profile_pic }}" alt="Profile Picture" width="100" height="100">
    {% else %}
        <p>No profile picture uploaded.</p>
    {% endif %}
</div>

<!-- Profile Information Section -->
<h2>Profile Information</h2>
<div>
    <p><strong>Name:</strong> {{ user.name }}</p>
    <p><strong>Gender:</strong> {{ user.gender }}</p>
    <p><strong>Age:</strong> {{ user.age }}</p>
    <p><strong>Profession:</strong> {{ user.profession }}</p>
    <p><strong>Location:</strong> {{ user.location }}</p>
    <p><strong>Profile Description:</strong> {{ user.profile_desc }}</p>
    <p><strong>Pets:</strong> {{ user.pets }}</p>
    <p><strong>Hobbies:</strong> {{ user.hobbies }}</p>
    <p><strong>Seeking:</strong> {{ user.seeking }}</p>
</div>

<!-- Change Profile Picture Section -->
<h2>Change Profile Picture</h2>
<form action="{{ url_for('upload_profile_pic') }}" method="POST" enctype="multipart/form-data">
    <!-- Ensure the file input field is named 'file' as expected in the Flask route -->
    <input type="file" name="file" accept="image/*">
    <button type="submit">Upload Profile Picture</button>
</form>

<!-- Flash Messages Section -->
{% with messages = get_flashed_messages() %}
    {% if messages %}
        <ul>
        {% for message in messages %}
            <li>{{ message }}</li>
        {% endfor %}
        </ul>
    {% endif %}
{% endwith %}

<!-- Edit Buttons for Each Section -->
<div>
    <a href="{{ url_for('editProfile', uid=user.user_id) }}">
        <button>Edit Profile</button>
    </a>
</div>

{% endblock %}/* the --color-header and others are CSS variables, which we access later. 
*/

HTML {
    --color-header: #007ea9;  /* color for H1-H6 and others. was deepskyblue but poor contrast. */
    --color-hilite: #b50000;  /* was red, but this avoids WAVE contrast errors */ 
    --color-focus: #56B929;
    --font-family: Verdana;
    font-family: var(--font-family)
}

/* For flashed messages; make them stand out using red and italics */

#messages {
    color: var(--color-hilite);
    font-style: italic;
}


h1 {
    font-size: 200%;
    color: var(--color-header);
    padding: 10px;
}

h2, h3 {
    color: var(--color-header);
    padding: 10px;
}
    

/* for a simple navbar. Talk to Scott if you want drop-downs. */
nav > ul {
    display: flex;
    flex-direction: row;
}

nav ul {
    list-style-type: none;
    margin: 0px;
    padding: 0px;
}

nav > ul > li {
    flex: 0 0 auto;
    width: 20em; 
}

nav button, nav a {
    display: block;
    box-sizing: border-box; /* easier to make button and A the same size */
    width: 100%;
    height: 40px;
    padding: 0px;
    padding-bottom: 5px;
    background-color: var(--color-header); /* was #3498db */
    border: 2px solid black;
    border-radius: 5px;
    cursor: pointer;
    /* Firefox uses font -apple-system unless I repeat the font spec here. */
    font-family: var(--font-family);
    font-weight: bold;
    font-size: 1rem;
    text-decoration: None;
}

/* Only the top-level buttons are centered; lower ones are left-aligned. */
nav > ul > li > button , nav > ul > li > a {
    text-align: center;
    color: white;
}

/* because of the margin trick, this can only be used for the last element */

nav li.right {
    margin-left: auto;
}

nav button:hover, button:focus, nav a:hover, nav a:focus {
    background-color: var(--color-focus);
}

.dropdown{
        background-color: white;
        padding:0.9em;
        color: black;
        visibility: visible;
}
.loginButtons{
    display: inline-block;
    padding: 5px 20px;
    font-size: 18px;
    background-color: #007ea9;
    border: 2px solid #000;
    border-radius: 5px;
    cursor: pointer;
    text-align: center;
    text-decoration: none;
}
.loginButtons a{
    color: white
}

.loginSignup{
    display: inline-flex;
    align-items: center;
}
.login{
    padding: 20px;
}
#loginButton, #signupButton{
    margin-left: 30px;
}

.form{
    padding: 5px;
    margin-left: 30px;
}

.post{
    border: 2px solid #007ea9;;
    border-radius: 5px;
    border-radius: 15px;
    width: fit-content;
    padding: 10px;
    align-self: center;
}

.newPostFom{
    text-align: center;
}

input[type=button], input[type=submit] {
    background-color: #007ea9;
    border: none;
    color: white;
    padding: 10px;
    font-family: var(--font-family);
    margin: 4px 2px;
    font-family: var(--font-family);
    font-size: 1rem;
    border: 2px solid black;
    border-radius: 5px;
    cursor: pointer;
  }

/* Centering posts */
.post {
    margin: 20px auto; /* Adds vertical spacing and centers the element */
    padding: 20px;
    width: 60%; /* Adjust to control the width of each post */
    background-color: #ffffff; /* Optional: White background for contrast */
    border: 1px solid #ddd; /* Optional: Border for visual clarity */
    border-radius: 10px; /* Optional: Rounded corners */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Optional: Subtle shadow for depth */
}

.newPostFom{
    text-align: center;
}

input[type=button], input[type=submit] {
    background-color: #007ea9;
    border: none;
    color: white;
    padding: 10px;
    font-family: var(--font-family);
    margin: 4px 2px;
    font-family: var(--font-family);
    font-size: 1rem;
    border: 2px solid black;
    border-radius: 5px;
    cursor: pointer;
  }

  .pics {
    display: block; /* Centers the image as a block element */
    margin: 10px auto; /* Centers the image horizontally */
    max-width: 100%; /* Prevents the image from overflowing the container */
    height: auto; /* Maintains the aspect ratio */
    max-height: 300px; /* Limits the height for very large images */
    object-fit: cover; /* Ensures the image fits nicely in the bounding box */
    border-radius: 5px; /* Optional: Adds rounded corners */
    border: 1px solid #ccc; /* Optional: Adds a border */
}

  .desc{
    font-weight: bold;
  }